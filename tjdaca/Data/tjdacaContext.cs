// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace tjdaca.Data
{
    public partial class tjdacaContext : DbContext
    {
        public tjdacaContext()
        {
        }

        public tjdacaContext(DbContextOptions<tjdacaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AcaOptions> AcaOptions { get; set; }
        public virtual DbSet<AcaQuestions> AcaQuestions { get; set; }
        public virtual DbSet<AcaRawdata> AcaRawdata { get; set; }
        public virtual DbSet<AcaSchools> AcaSchools { get; set; }
        public virtual DbSet<AcaStuExamScore> AcaStuExamScore { get; set; }
        public virtual DbSet<AcaStuSchoolScore> AcaStuSchoolScore { get; set; }
        public virtual DbSet<AcaStudents> AcaStudents { get; set; }
        public virtual DbSet<AcaSubject> AcaSubject { get; set; }
        public virtual DbSet<AcaTeachers> AcaTeachers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseMySql("server=m.teukjadan.net;database=teukjadan_mobile;uid=tjdaca;pwd=Qwer12345@", Microsoft.EntityFrameworkCore.ServerVersion.Parse("10.11.2-mariadb"));
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_general_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<AcaOptions>(entity =>
            {
                entity.HasKey(e => e.OIdx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_options");

                entity.Property(e => e.OIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("o_idx");

                entity.Property(e => e.OptOrder)
                    .HasColumnType("int(11)")
                    .HasColumnName("opt_order");

                entity.Property(e => e.OptType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("opt_type")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.OptValue)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("opt_value")
                    .HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<AcaQuestions>(entity =>
            {
                entity.HasKey(e => e.QIdx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_questions");

                entity.Property(e => e.QIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("q_idx");

                entity.Property(e => e.BaseDate)
                    .HasColumnName("base_date")
                    .HasDefaultValueSql("curdate()");

                entity.Property(e => e.Etc1)
                    .HasMaxLength(500)
                    .HasColumnName("etc1");

                entity.Property(e => e.QSubject)
                    .HasMaxLength(500)
                    .HasColumnName("q_subject");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reg_date")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.StuIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("stu_idx");

                entity.Property(e => e.StuName)
                    .HasMaxLength(20)
                    .HasColumnName("stu_name");

                entity.Property(e => e.TIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("t_idx");

                entity.Property(e => e.TName)
                    .HasMaxLength(20)
                    .HasColumnName("t_name");
            });

            modelBuilder.Entity<AcaRawdata>(entity =>
            {
                entity.HasKey(e => e.RIdx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_rawdata");

                entity.Property(e => e.RIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("r_idx");

                entity.Property(e => e.AbsenceReason)
                    .HasMaxLength(500)
                    .HasColumnName("absence_reason");

                entity.Property(e => e.Attendance)
                    .HasMaxLength(1)
                    .HasColumnName("attendance");

                entity.Property(e => e.BaseDate).HasColumnName("base_date");

                entity.Property(e => e.ClassGrade)
                    .HasMaxLength(50)
                    .HasColumnName("class_grade");

                entity.Property(e => e.ClassName)
                    .HasMaxLength(50)
                    .HasColumnName("class_name");

                entity.Property(e => e.ClassSubject)
                    .HasMaxLength(200)
                    .HasColumnName("class_subject");

                entity.Property(e => e.CliniqCorrect).HasColumnName("cliniq_correct");

                entity.Property(e => e.CliniqCount).HasColumnName("cliniq_count");

                entity.Property(e => e.CliniqGrade)
                    .HasMaxLength(50)
                    .HasColumnName("cliniq_grade");

                entity.Property(e => e.CliniqScore).HasColumnName("cliniq_score");

                entity.Property(e => e.CliniqSubject)
                    .HasMaxLength(200)
                    .HasColumnName("cliniq_subject");

                entity.Property(e => e.Counsel)
                    .HasMaxLength(500)
                    .HasColumnName("counsel");

                entity.Property(e => e.DailyCorrect).HasColumnName("daily_correct");

                entity.Property(e => e.DailyScore).HasColumnName("daily_score");

                entity.Property(e => e.DaliyCount).HasColumnName("daliy_count");

                entity.Property(e => e.Difficulty)
                    .HasMaxLength(10)
                    .HasColumnName("difficulty");

                entity.Property(e => e.Etc1)
                    .HasMaxLength(500)
                    .HasColumnName("etc1");

                entity.Property(e => e.Etc2)
                    .HasMaxLength(500)
                    .HasColumnName("etc2");

                entity.Property(e => e.Etc3)
                    .HasMaxLength(500)
                    .HasColumnName("etc3");

                entity.Property(e => e.Grade)
                    .HasMaxLength(2)
                    .HasColumnName("grade");

                entity.Property(e => e.Homework)
                    .HasMaxLength(200)
                    .HasColumnName("homework");

                entity.Property(e => e.HomeworkCorrect).HasColumnName("homework_correct");

                entity.Property(e => e.HomeworkPerform).HasColumnName("homework_perform");

                entity.Property(e => e.HomeworkPrev).HasColumnName("homework_prev");

                entity.Property(e => e.HomeworkProgress).HasColumnName("homework_progress");

                entity.Property(e => e.HomeworkRatio).HasColumnName("homework_ratio");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reg_date");

                entity.Property(e => e.SchAchievement)
                    .HasMaxLength(50)
                    .HasColumnName("sch_achievement");

                entity.Property(e => e.SchName)
                    .HasMaxLength(50)
                    .HasColumnName("sch_name");

                entity.Property(e => e.SchType)
                    .HasMaxLength(10)
                    .HasColumnName("sch_type");

                entity.Property(e => e.StuIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("stu_idx");

                entity.Property(e => e.StuName)
                    .HasMaxLength(50)
                    .HasColumnName("stu_Name");

                entity.Property(e => e.TIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("t_idx");

                entity.Property(e => e.TestGrade)
                    .HasMaxLength(50)
                    .HasColumnName("test_grade");

                entity.Property(e => e.TestSubject)
                    .HasMaxLength(200)
                    .HasColumnName("test_subject");

                entity.Property(e => e.TextbookSource)
                    .HasMaxLength(50)
                    .HasColumnName("textbook_source");
            });

            modelBuilder.Entity<AcaSchools>(entity =>
            {
                entity.HasKey(e => e.SchIdx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_schools");

                entity.Property(e => e.SchIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("sch_idx");

                entity.Property(e => e.Regdate)
                    .HasColumnType("datetime")
                    .HasColumnName("regdate");

                entity.Property(e => e.SchName)
                    .HasMaxLength(50)
                    .HasColumnName("sch_name");
            });

            modelBuilder.Entity<AcaStuExamScore>(entity =>
            {
                entity.HasKey(e => e.Idx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_stu_exam_score");

                entity.Property(e => e.Idx)
                    .HasColumnType("int(11)")
                    .HasColumnName("idx");

                entity.Property(e => e.Month)
                    .HasColumnType("int(11)")
                    .HasColumnName("month");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reg_date")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.ReportUrl)
                    .HasMaxLength(300)
                    .HasColumnName("report_url");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.StuIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("stu_idx");

                entity.Property(e => e.StuName)
                    .HasMaxLength(20)
                    .HasColumnName("stu_name");

                entity.Property(e => e.Year)
                    .HasColumnType("int(11)")
                    .HasColumnName("year");
            });

            modelBuilder.Entity<AcaStuSchoolScore>(entity =>
            {
                entity.HasKey(e => e.Idx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_stu_school_score");

                entity.Property(e => e.Idx)
                    .HasColumnType("int(11)")
                    .HasColumnName("idx");

                entity.Property(e => e.H11).HasColumnName("h1_1");

                entity.Property(e => e.H12).HasColumnName("h1_2");

                entity.Property(e => e.H21).HasColumnName("h2_1");

                entity.Property(e => e.H22).HasColumnName("h2_2");

                entity.Property(e => e.H31).HasColumnName("h3_1");

                entity.Property(e => e.H32).HasColumnName("h3_2");

                entity.Property(e => e.M11).HasColumnName("m1_1");

                entity.Property(e => e.M12).HasColumnName("m1_2");

                entity.Property(e => e.M21).HasColumnName("m2_1");

                entity.Property(e => e.M22).HasColumnName("m2_2");

                entity.Property(e => e.M31).HasColumnName("m3_1");

                entity.Property(e => e.M32).HasColumnName("m3_2");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reg_date")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.StuIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("stu_idx");

                entity.Property(e => e.StuName)
                    .HasMaxLength(20)
                    .HasColumnName("stu_name");
            });

            modelBuilder.Entity<AcaStudents>(entity =>
            {
                entity.HasKey(e => e.StuIdx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_students");

                entity.Property(e => e.StuIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("stu_idx");

                entity.Property(e => e.AcaOutdate).HasColumnName("aca_outdate");

                entity.Property(e => e.AcaRegdate).HasColumnName("aca_regdate");

                entity.Property(e => e.Address1)
                    .HasMaxLength(200)
                    .HasColumnName("address_1")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Address2)
                    .HasMaxLength(100)
                    .HasColumnName("address_2")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Agree)
                    .HasColumnType("bit(1)")
                    .HasColumnName("agree");

                entity.Property(e => e.Class)
                    .HasMaxLength(50)
                    .HasColumnName("class");

                entity.Property(e => e.CognitivePathway)
                    .HasMaxLength(50)
                    .HasColumnName("cognitive_pathway");

                entity.Property(e => e.Etc1)
                    .HasMaxLength(500)
                    .HasColumnName("etc1");

                entity.Property(e => e.Etc2)
                    .HasMaxLength(500)
                    .HasColumnName("etc2");

                entity.Property(e => e.Etc3)
                    .HasMaxLength(100)
                    .HasColumnName("etc3");

                entity.Property(e => e.Etc4)
                    .HasMaxLength(100)
                    .HasColumnName("etc4");

                entity.Property(e => e.Etc5)
                    .HasMaxLength(100)
                    .HasColumnName("etc5");

                entity.Property(e => e.Etc6)
                    .HasMaxLength(100)
                    .HasColumnName("etc6");

                entity.Property(e => e.Etc7)
                    .HasMaxLength(100)
                    .HasColumnName("etc7");

                entity.Property(e => e.Etc8)
                    .HasMaxLength(100)
                    .HasColumnName("etc8");

                entity.Property(e => e.Etc9)
                    .HasMaxLength(100)
                    .HasColumnName("etc9");

                entity.Property(e => e.HopeHighschool)
                    .HasMaxLength(50)
                    .HasColumnName("hope_highschool");

                entity.Property(e => e.HopeUniversity)
                    .HasMaxLength(50)
                    .HasColumnName("hope_university");

                entity.Property(e => e.Lastdate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastdate");

                entity.Property(e => e.MathProgress)
                    .HasMaxLength(300)
                    .HasColumnName("math_progress");

                entity.Property(e => e.Parent)
                    .HasMaxLength(20)
                    .HasColumnName("parent")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.ParentPhone)
                    .HasMaxLength(15)
                    .HasColumnName("parent_phone")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Regdate)
                    .HasColumnType("datetime")
                    .HasColumnName("regdate");

                entity.Property(e => e.SchGrade)
                    .HasMaxLength(2)
                    .HasColumnName("sch_grade")
                    .HasComment("학년");

                entity.Property(e => e.SchType)
                    .HasMaxLength(10)
                    .HasColumnName("sch_type")
                    .HasComment("초등/중등/고등");

                entity.Property(e => e.School)
                    .HasMaxLength(50)
                    .HasColumnName("school")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.StuName)
                    .HasMaxLength(20)
                    .HasColumnName("stu_name")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.StudentPhone)
                    .HasMaxLength(15)
                    .HasColumnName("student_phone")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Subject)
                    .HasMaxLength(10)
                    .HasColumnName("subject");

                entity.Property(e => e.SubjectOption)
                    .HasMaxLength(10)
                    .HasColumnName("subject_option");

                entity.Property(e => e.Teacher)
                    .HasMaxLength(20)
                    .HasColumnName("teacher");

                entity.Property(e => e.TestArea)
                    .HasMaxLength(200)
                    .HasColumnName("test_area");

                entity.Property(e => e.TestDate).HasColumnName("test_date");

                entity.Property(e => e.TestResult)
                    .HasMaxLength(300)
                    .HasColumnName("test_result");

                entity.Property(e => e.TestScore)
                    .HasMaxLength(10)
                    .HasColumnName("test_score");

                entity.Property(e => e.VisitPurpose)
                    .HasMaxLength(300)
                    .HasColumnName("visit_purpose");

                entity.Property(e => e.Zipcode)
                    .HasMaxLength(10)
                    .HasColumnName("zipcode")
                    .HasDefaultValueSql("''");
            });

            modelBuilder.Entity<AcaSubject>(entity =>
            {
                entity.HasKey(e => e.MIdx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_subject");

                entity.HasIndex(e => new { e.Subject, e.Grade }, "인덱스 2");

                entity.Property(e => e.MIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("m_idx");

                entity.Property(e => e.Grade)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("grade");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("subject");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<AcaTeachers>(entity =>
            {
                entity.HasKey(e => e.TIdx)
                    .HasName("PRIMARY");

                entity.ToTable("aca_teachers");

                entity.Property(e => e.TIdx)
                    .HasColumnType("int(11)")
                    .HasColumnName("t_idx");

                entity.Property(e => e.Regdate)
                    .HasColumnType("datetime")
                    .HasColumnName("regdate")
                    .HasDefaultValueSql("current_timestamp()");

                entity.Property(e => e.TName)
                    .HasMaxLength(20)
                    .HasColumnName("t_name");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}