@page "/new"
@layout CustomLayout

@using tjdaca.Data
@inject tjdaca.Services.IStudentService studentService
@inject tjdaca.Services.IOptionService optionService
@inject IJSRuntime JS


<PageTitle>신규 학생 등록</PageTitle>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">신규 학생 등록</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <EditForm Model="@student" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>

    <MudCardContent>
        <MudGrid Spacing="2">
            <MudItem xs="6">
                    <MudTextField @bind-Value="student.StuName" For="@(() => student.StuName)" Label="학생 이름" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                    <MudTextField @bind-Value="student.StudentPhone" For="@(() => student.StudentPhone)" Label="학생 연락처" Variant="Variant.Text" Margin="Margin.Normal" Placeholder="01088886666 (숫자를 다 붙여 쓰시면 됩니다)"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                    <MudTextField @bind-Value="student.Parent" For="@(() => student.Parent)" Label="학부모 이름" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                    <MudTextField @bind-Value="student.ParentPhone" For="@(() => student.ParentPhone)" Label="학부모 연락처" Variant="Variant.Text" Margin="Margin.Normal" Placeholder="01088886666 (숫자를 다 붙여 쓰시면 됩니다)"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect @bind-Value="student.SchType" Label="학교구분" Variant="Variant.Text" Margin="Margin.Normal">
                    @foreach (var type in schTypeList)
                    {
                        <MudSelectItem Value="@type.OptValue">@type.OptValue</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="student.School" Label="학교" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect @bind-Value="student.SchGrade" Label="학년" Variant="Variant.Text" Margin="Margin.Normal">
                    @foreach (var type in schGradeList)
                    {
                        <MudSelectItem Value="@type.OptValue">@type.OptValue</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="2">
                <MudTextField @bind-Value="student.Zipcode" Label="우편번호" id="zipcode" Variant="Variant.Text" Margin="Margin.Normal" ReadOnly="true" onclick="@execDaumPostcode"></MudTextField>
            </MudItem>
            <MudItem xs="5">
                <MudTextField @bind-Value="student.Address1" Label="도로명주소" id="roadAddress" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem xs="5">
                <MudTextField @bind-Value="student.Address2" Label="상세주소" id="detailAddress" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            </MudItem>

            <MudItem xs="6">
                <MudTextField @bind-Value="student.HopeHighschool" Label="희망고등학교" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="student.HopeUniversity" Label="희망대학교" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value="student.CognitivePathway" Label="학원 인지경로" Variant="Variant.Text" Margin="Margin.Normal">
                    @foreach (var type in cognitivePathwayList)
                    {
                        <MudSelectItem Value="@type.OptValue">@type.OptValue</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudSelect @bind-Value="student.Subject" Label="수강희망과목" Variant="Variant.Text" Margin="Margin.Normal">
                    @foreach (var type in subjectList)
                    {
                        <MudSelectItem Value="@type.OptValue">@type.OptValue</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudSelect @bind-Value="student.SubjectOption" Label="과정선택" Variant="Variant.Text" Margin="Margin.Normal">
                    @foreach (var type in schTypeList)
                    {
                        <MudSelectItem Value="@type.OptValue">@type.OptValue</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        
            <MudItem xs="6">
                <MudTextField @bind-Value="student.MathProgress" Label="현재수학진도현황" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox @bind-Checked="@student.Agree" Label="개인정보수집 활용에 동의합니다."></MudCheckBox>
            </MudItem>

        </MudGrid>
        <br />
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Size="Size.Large" Color="Color.Info" StartIcon="@Icons.Material.Filled.Save" >학생 정보 등록</MudButton>
        <MudButton Variant="Variant.Filled" Size="Size.Large" OnClick="Cancel">입력내용 초기화</MudButton>
    </MudCardContent>

    </EditForm>

</MudCard>


@code {
    bool success;
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        Save();
    }

    private async Task execDaumPostcode()
    {
        string result = await JS.InvokeAsync<string>("execDaumPostcode");
        var addressObj = System.Text.Json.JsonSerializer.Deserialize<PostData>(result);

        student.Address1 = addressObj.applyAddress;
        student.Zipcode = addressObj.zonecode;

        StateHasChanged();
    }

    private class PostData
    {
        public string zonecode { get; set; }
        public string roadAddress { get; set; }
        public string bname { get; set; }
        public string buildingName { get; set; }
        public string apartment { get; set; }
        public string applyAddress {
            get {
                string rtnStr = string.Empty;
                // 법정동명이 있을 경우 추가한다. (법정리는 제외)
                // 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
                if (this.bname != "" && (bname.EndsWith("동") || bname.EndsWith("로") || bname.EndsWith("가")))
                {
                    rtnStr += this.bname;
                }
                // 건물명이 있고, 공동주택일 경우 추가한다.
                if (this.buildingName != "" && this.apartment == "Y")
                {
                    rtnStr += (rtnStr != "" ? ", " + this.buildingName : this.buildingName);
                }
                // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
                if (rtnStr != "")
                {
                    rtnStr = " (" + rtnStr + ")";
                }

                return $"{roadAddress}{rtnStr}";
            }
        }
    }
}

