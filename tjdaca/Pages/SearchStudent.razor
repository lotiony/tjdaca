@page "/search"
@using tjdaca.Data
@inject tjdaca.Services.IStudentService studentService
@inject tjdaca.Services.IOptionService optionService
@inject MudBlazor.ISnackbar snackBar
@using MudBlazor.Components


<PageTitle>학생 성적 관리</PageTitle>

<h3>학생 성적 관리</h3>

<MudDataGrid T="AcaStudents" Items="@Students" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterRow">
    <Columns>
        <PropertyColumn Property="x => x.StuIdx" Title="학생번호" Filterable="false" />
        <PropertyColumn Property="x => x.StuName" Title="학생이름" ShowFilterIcon="false" />
        <PropertyColumn Property="x => x.Teacher" Title="담임">
            <FilterTemplate>
                <MudIconButton OnClick="@OpenFilter" Icon="@_icon" Size="@Size.Small" />
                <MudOverlay Visible="@_filterOpen" OnClick="@(() => _filterOpen = false)" />
                <MudPopover Open="@_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                            Style="width:150px">
                    <MudStack Spacing="0">
                        <MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Checked="@_selectAll" CheckedChanged="@SelectAll" />
                        <MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
                            @foreach (var item in Teachers)
                            {
                                <MudCheckBox T="bool" Label="@($"{item}")" Size="@Size.Small" Checked="@(_selectedTeachers.Contains(item))"
                                         CheckedChanged="@((value) => SelectedChanged(value, item))" />
                            }
                        </MudStack>
                        <MudStack Row="true">
                            <MudButton OnClick="@(() => ClearFilter(context))">Clear</MudButton>
                            <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilter(context))">Filter</MudButton>
                        </MudStack>
                    </MudStack>
                </MudPopover>
            </FilterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.School" Title="학교" ShowFilterIcon="false" />
        <TemplateColumn StickyRight="true"  Title="성적입력" Filterable="false" >
            <CellTemplate>
                <MudFab @onclick="@(() => Edit(context.Item.StuIdx))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="AcaStudents" />
    </PagerContent>
</MudDataGrid>


@code {
    IEnumerable<AcaStudents> Students = new List<AcaStudents>();
    FilterDefinition<AcaStudents> _filterDefinition;
    List<string> Teachers = new List<string>();
    HashSet<string> _selectedTeachers = new();
    HashSet<string> _filterTeachers = new();

    bool _selectAll = true;
    string _icon = Icons.Material.Outlined.FilterAlt;
    private DateTime? filterDate;

    bool _filterOpen = false;

    protected override async Task OnInitializedAsync()
    {
        Students = await studentService.GetStudentsAsync();
        Teachers = optionService.GetTeachers();
        Teachers.Insert(0, "미정");
        _selectedTeachers = Teachers.ToHashSet();
        _filterTeachers = Teachers.ToHashSet();
        _filterDefinition = new FilterDefinition<AcaStudents>
            {
                FilterFunction = x => _filterTeachers.Contains(x.Teacher)
            };
    }

    void OpenFilter()
    {
        _filterOpen = true;
    }

    private void SelectedChanged(bool value, string item)
    {
        if (value)
            _selectedTeachers.Add(item);
        else
            _selectedTeachers.Remove(item);

        if (_selectedTeachers.Count == Teachers.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private void ClearFilter(FilterContext<AcaStudents> context)
    {
        _selectedTeachers = Teachers.ToHashSet();
        _filterTeachers = Teachers.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        context.Actions.ClearFilter(_filterDefinition);
        _filterOpen = false;
    }

    private void ApplyFilter(FilterContext<AcaStudents> context)
    {
        _filterTeachers = _selectedTeachers.ToHashSet();
        _icon = _filterTeachers.Count == Teachers.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        context.Actions.ApplyFilter(_filterDefinition);
        _filterOpen = false;
    }

    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedTeachers = Teachers.ToHashSet();
        }
        else
        {
            _selectedTeachers.Clear();
        }
    }


}